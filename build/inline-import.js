/**
 * inline-import v1.2.3 build Sun Jul 15 2018
 * https://github.com/vanruesc/inline-import
 * Copyright 2018 Raoul van RÃ¼schen, Zlib
 */
'use strict';function _interopDefault(a){return a&&'object'==typeof a&&'default'in a?a['default']:a}var path=_interopDefault(require('path')),fs=_interopDefault(require('fs')),classCallCheck=function(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')},createClass=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,'value'in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),toConsumableArray=function(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}return Array.from(a)},FileImport=function a(b,c,d,e,f){var g=5<arguments.length&&arguments[5]!==void 0?arguments[5]:null;classCallCheck(this,a),this.start=b,this.end=c,this.name=d,this.path=e,this.encoding=f,this.data=g},Settings=function a(){var b=0<arguments.length&&arguments[0]!==void 0?arguments[0]:'utf8',c=1<arguments.length&&arguments[1]!==void 0?arguments[1]:{},d=!!(2<arguments.length&&arguments[2]!==void 0)&&arguments[2];classCallCheck(this,a),this.encoding=b,this.extensions=c,this.declaration=d?'var':'const'},importRegExp=/import\s*(\w*)\s*from\s*["'](.*)["']/ig;function readFile(a,b){return new Promise(function(c,d){fs.readFile(a,b,function(a,b){return a?d(a):c(b)})})}function parseImports(a,b,c){for(var d=[],e=importRegExp.exec(a),f=void 0;null!==e;)f=c[path.extname(e[2])],void 0!==f&&d.push(new FileImport(e.index,importRegExp.lastIndex,e[1],path.resolve(path.dirname(b),e[2]),f)),e=importRegExp.exec(a);return Promise.resolve([d,a])}function readImports(a,b){return 0===a.length?Promise.resolve([a,b]):new Promise(function(c,d){var e=0;(function f(g,h){h&&(a[e++].data=h),g?d(g):e===a.length?c([a,b]):fs.readFile(a[e].path,a[e].encoding,f)})()})}function inlineImports(a,b,c){var d=0<a.length,e=void 0,f=void 0;for(e=a.length-1;0<=e;--e)f=a[e],b=b.substring(0,f.start)+c+' '+f.name+' = '+JSON.stringify(f.data)+b.substring(f.end);return Promise.resolve([d,b])}function writeFile(a,b,c){return a?new Promise(function(a,d){fs.writeFile(c,b,function(b){b?d(b):a(!0)})}):Promise.resolve(!1)}var InlineImport=function(){function a(){classCallCheck(this,a)}return createClass(a,null,[{key:'transform',value:function(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},c=new Settings(b.encoding,b.extensions,b.useVar);return readFile(a,c.encoding).then(function(b){return parseImports(b,a,c.extensions)}).then(function(a){return readImports.apply(void 0,toConsumableArray(a))}).then(function(a){return inlineImports.apply(void 0,toConsumableArray(a).concat([c.declaration]))}).then(function(b){return writeFile.apply(void 0,toConsumableArray(b).concat([a]))})}}]),a}();module.exports=InlineImport;
