/**
 * inline-import v0.1.0 build Dec 09 2017
 * https://github.com/vanruesc/inline-import
 * Copyright 2017 Raoul van RÃ¼schen, Zlib
 */

"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}function readFile(e,n){return new Promise(function(t,r){fs.readFile(e,n,function(e,n){return e?r(e):t(n)})})}function parseImports(e,n,t){for(var r=[],i=importRegExp.exec(e),o=void 0;null!==i;)void 0!==(o=t[path.extname(i[2])])&&r.push(new FileImport(i.index,importRegExp.lastIndex,i[1],path.resolve(path.dirname(n),i[2]),o)),i=importRegExp.exec(e);return Promise.resolve([r,e])}function readImports(e,n){return 0===e.length?Promise.resolve([e,n]):new Promise(function(t,r){var i=0;!function o(a,s){s&&(e[i++].data=s),a?r(a):i===e.length?t([e,n]):fs.readFile(e[i].path,e[i].encoding,o)}()})}function inlineImports(e,n,t){var r=e.length>0,i=void 0,o=void 0;for(i=e.length-1;i>=0;--i)o=e[i],n=n.substring(0,o.start)+t+" "+o.name+" = "+JSON.stringify(o.data)+n.substring(o.end);return Promise.resolve([r,n])}function writeFile(e,n,t){return e?new Promise(function(e,r){fs.writeFile(t,n,function(n){n?r(n):e()})}):Promise.resolve()}var path=_interopDefault(require("path")),fs=_interopDefault(require("fs")),classCallCheck=function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")},createClass=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),toConsumableArray=function(e){if(Array.isArray(e)){for(var n=0,t=Array(e.length);n<e.length;n++)t[n]=e[n];return t}return Array.from(e)},FileImport=function e(n,t,r,i,o){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:null;classCallCheck(this,e),this.start=n,this.end=t,this.name=r,this.path=i,this.encoding=o,this.data=a},Settings=function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"utf8",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];classCallCheck(this,e),this.encoding=n,this.extensions=t,this.declaration=r?"var":"const"},importRegExp=/import\s*(\w*)\s*from\s*["'](.*)["']/gi,InlineImport=function(){function e(){classCallCheck(this,e)}return createClass(e,null,[{key:"transform",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=new Settings(n.encoding,n.extensions,n.useVar);return readFile(e,t.encoding).then(function(n){return parseImports(n,e,t.extensions)}).then(function(e){return readImports.apply(void 0,toConsumableArray(e))}).then(function(e){return inlineImports.apply(void 0,toConsumableArray(e).concat([t.declaration]))}).then(function(n){return writeFile.apply(void 0,toConsumableArray(n).concat([e]))})}}]),e}();module.exports=InlineImport;